"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("fs");
var dockerfile_ast_1 = require("dockerfile-ast");
var instruction_parser_1 = require("./instruction-parser");
function readDockerfileAndAnalyse(targetFilePath) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var contents;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!targetFilePath) {
                        return [2 /*return*/, undefined];
                    }
                    return [4 /*yield*/, readFile(targetFilePath)];
                case 1:
                    contents = _a.sent();
                    return [2 /*return*/, analyseDockerfile(contents)];
            }
        });
    });
}
exports.readDockerfileAndAnalyse = readDockerfileAndAnalyse;
function analyseDockerfile(contents) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var dockerfile, from, runInstructions, dockerfilePackages, baseImage, fromVariables, resolvedVariables_1;
        return tslib_1.__generator(this, function (_a) {
            dockerfile = dockerfile_ast_1.DockerfileParser.parse(contents);
            from = dockerfile.getFROMs().pop();
            runInstructions = dockerfile.getInstructions()
                .filter(function (instruction) {
                return instruction.getInstruction() === 'RUN';
            })
                .map(function (instruction) { return instruction.toString(); });
            dockerfilePackages = instruction_parser_1.getPackagesFromRunInstructions(runInstructions);
            if (from) {
                fromVariables = from.getVariables();
                baseImage = from.getImage();
                if (fromVariables) {
                    resolvedVariables_1 = fromVariables.reduce(function (resolvedVars, variable) {
                        var line = variable.getRange().start.line;
                        var name = variable.getName();
                        resolvedVars[name] = dockerfile.resolveVariable(name, line);
                        return resolvedVars;
                    }, {});
                    Object.keys(resolvedVariables_1).forEach(function (variable) {
                        baseImage = baseImage.replace("${" + variable + "}", resolvedVariables_1[variable]);
                    });
                }
            }
            return [2 /*return*/, {
                    baseImage: baseImage,
                    dockerfilePackages: dockerfilePackages,
                }];
        });
    });
}
exports.analyseDockerfile = analyseDockerfile;
function readFile(path) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fs.readFile(path, 'utf8', function (err, data) {
                        return err ? reject(err) : resolve(data);
                    });
                })];
        });
    });
}
//# sourceMappingURL=docker-file.js.map