"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:max-line-length
var installRegex = /\s*(rpm\s+-i|rpm\s+--install|apk\s+add|apt\s+install|apt-get\s+install|yum\s+install|aptitude\s+install)\s+/;
/*
 * This is fairly ugly because a single RUN could contain multiple install
 * commands, which in turn may install multiple packages, so we've got a
 * 3-level nested array (RUN instruction[] -> install[] -> package[])
 *
 * We also need to account for the multiple ways to split commands, and
 * arbitrary whitespace
 */
function getPackagesFromRunInstructions(runInstructions) {
    return runInstructions.reduce(function (dockerfilePackages, instruction) {
        var runDef = 'RUN ';
        var commands = instruction.slice(runDef.length).split(/\s?(;|&&)\s?/);
        var installCommands = commands.filter(function (command) {
            return installRegex.test(command);
        });
        if (installCommands.length) {
            // Get the packages per install command and flatten them
            var packagesWithInstructions = installCommands.forEach(function (command) {
                var packages = command
                    .replace(installRegex, '')
                    .replace(/(^-|\s-)\w+/g, '')
                    .trim()
                    .split(/\s+/);
                packages.forEach(function (pkg) {
                    dockerfilePackages[pkg] = { instruction: instruction };
                });
            });
        }
        return dockerfilePackages;
    }, {});
}
exports.getPackagesFromRunInstructions = getPackagesFromRunInstructions;
//# sourceMappingURL=instruction-parser.js.map