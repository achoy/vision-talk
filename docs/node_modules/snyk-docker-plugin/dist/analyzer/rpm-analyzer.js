"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var docker_1 = require("../docker");
function analyze(targetImage, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var pkgs;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getPackages(targetImage, options)];
                case 1:
                    pkgs = _a.sent();
                    return [2 /*return*/, {
                            Image: targetImage,
                            AnalyzeType: 'Rpm',
                            Analysis: pkgs,
                        }];
            }
        });
    });
}
exports.analyze = analyze;
function getPackages(targetImage, options) {
    return new docker_1.Docker(targetImage, options).run('rpm', [
        '--nodigest',
        '--nosignature',
        '-qa',
        '--qf',
        '"%{NAME}\t%|EPOCH?{%{EPOCH}:}|%{VERSION}-%{RELEASE}\t%{SIZE}\n"',
    ])
        .catch(function (error) {
        var stderr = error.stderr;
        if (typeof stderr === 'string' && stderr.indexOf('not found') >= 0) {
            return { stdout: '', stderr: '' };
        }
        throw error;
    })
        .then(function (output) { return parseOutput(output.stdout); });
}
function parseOutput(output) {
    var pkgs = [];
    for (var _i = 0, _a = output.split('\n'); _i < _a.length; _i++) {
        var line = _a[_i];
        parseLine(line, pkgs);
    }
    return pkgs;
}
function parseLine(text, pkgs) {
    var _a = text.split('\t'), name = _a[0], version = _a[1], size = _a[2];
    if (name && version && size) {
        var pkg = {
            Name: name,
            Version: version,
            Source: undefined,
            Provides: [],
            Deps: {},
            AutoInstalled: undefined,
        };
        pkgs.push(pkg);
    }
}
//# sourceMappingURL=rpm-analyzer.js.map