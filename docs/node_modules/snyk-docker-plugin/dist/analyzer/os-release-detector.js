"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var docker_1 = require("../docker");
function detect(targetImage, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var docker, osRelease;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    docker = new docker_1.Docker(targetImage, options);
                    return [4 /*yield*/, tryOSRelease(docker)];
                case 1:
                    osRelease = _a.sent();
                    if (!!osRelease) return [3 /*break*/, 3];
                    return [4 /*yield*/, tryLSBRelease(docker)];
                case 2:
                    osRelease = _a.sent();
                    _a.label = 3;
                case 3:
                    if (!!osRelease) return [3 /*break*/, 5];
                    return [4 /*yield*/, tryDebianVersion(docker)];
                case 4:
                    osRelease = _a.sent();
                    _a.label = 5;
                case 5:
                    if (!!osRelease) return [3 /*break*/, 7];
                    return [4 /*yield*/, tryAlpineRelease(docker)];
                case 6:
                    osRelease = _a.sent();
                    _a.label = 7;
                case 7:
                    if (!!osRelease) return [3 /*break*/, 9];
                    return [4 /*yield*/, tryOracleRelease(docker)];
                case 8:
                    osRelease = _a.sent();
                    _a.label = 9;
                case 9:
                    if (!!osRelease) return [3 /*break*/, 11];
                    return [4 /*yield*/, tryRedHatRelease(docker)];
                case 10:
                    osRelease = _a.sent();
                    _a.label = 11;
                case 11:
                    if (!osRelease) {
                        throw new Error('Failed to detect OS release');
                    }
                    // Oracle Linux identifies itself as "ol"
                    if (osRelease.name.trim() === 'ol') {
                        osRelease.name = 'oracle';
                    }
                    return [2 /*return*/, osRelease];
            }
        });
    });
}
exports.detect = detect;
function tryOSRelease(docker) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var text, idRes, name, versionRes, version;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryRelease(docker, '/etc/os-release')];
                case 1:
                    text = _a.sent();
                    if (!text) {
                        return [2 /*return*/, null];
                    }
                    idRes = text.match(/^ID=(.+)$/m);
                    if (!idRes) {
                        throw new Error('Failed to parse /etc/os-release');
                    }
                    name = idRes[1].replace(/"/g, '');
                    versionRes = text.match(/^VERSION_ID=(.+)$/m);
                    version = versionRes ? versionRes[1].replace(/"/g, '') : 'unstable';
                    return [2 /*return*/, { name: name, version: version }];
            }
        });
    });
}
function tryLSBRelease(docker) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var text, idRes, versionRes, name, version;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryRelease(docker, '/etc/lsb-release')];
                case 1:
                    text = _a.sent();
                    if (!text) {
                        return [2 /*return*/, null];
                    }
                    idRes = text.match(/^DISTRIB_ID=(.+)$/m);
                    versionRes = text.match(/^DISTRIB_RELEASE=(.+)$/m);
                    if (!idRes || !versionRes) {
                        throw new Error('Failed to parse /etc/lsb-release');
                    }
                    name = idRes[1].replace(/"/g, '').toLowerCase();
                    version = versionRes[1].replace(/"/g, '');
                    return [2 /*return*/, { name: name, version: version }];
            }
        });
    });
}
function tryDebianVersion(docker) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var text;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryRelease(docker, '/etc/debian_version')];
                case 1:
                    text = _a.sent();
                    if (!text) {
                        return [2 /*return*/, null];
                    }
                    text = text.trim();
                    if (text.length < 2) {
                        throw new Error('Failed to parse /etc/debian_version');
                    }
                    return [2 /*return*/, { name: 'debian', version: text.split('.')[0] }];
            }
        });
    });
}
function tryAlpineRelease(docker) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var text;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryRelease(docker, '/etc/alpine-release')];
                case 1:
                    text = _a.sent();
                    if (!text) {
                        return [2 /*return*/, null];
                    }
                    text = text.trim();
                    if (text.length < 2) {
                        throw new Error('Failed to parse /etc/alpine-release');
                    }
                    return [2 /*return*/, { name: 'alpine', version: text }];
            }
        });
    });
}
function tryRedHatRelease(docker) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var text, idRes, versionRes, name, version;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryRelease(docker, '/etc/redhat-release')];
                case 1:
                    text = _a.sent();
                    if (!text) {
                        return [2 /*return*/, null];
                    }
                    idRes = text.match(/^(\S+)/m);
                    versionRes = text.match(/(\d+)\./m);
                    if (!idRes || !versionRes) {
                        throw new Error('Failed to parse /etc/redhat-release');
                    }
                    name = idRes[1].replace(/"/g, '').toLowerCase();
                    version = versionRes[1].replace(/"/g, '');
                    return [2 /*return*/, { name: name, version: version }];
            }
        });
    });
}
function tryOracleRelease(docker) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var text, idRes, versionRes, name, version;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryRelease(docker, '/etc/oracle-release')];
                case 1:
                    text = _a.sent();
                    if (!text) {
                        return [2 /*return*/, null];
                    }
                    idRes = text.match(/^(\S+)/m);
                    versionRes = text.match(/(\d+\.\d+)/m);
                    if (!idRes || !versionRes) {
                        throw new Error('Failed to parse /etc/oracle-release');
                    }
                    name = idRes[1].replace(/"/g, '').toLowerCase();
                    version = versionRes[1].replace(/"/g, '');
                    return [2 /*return*/, { name: name, version: version }];
            }
        });
    });
}
function tryRelease(docker, release) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var error_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, docker.catSafe(release)];
                case 1: return [2 /*return*/, (_a.sent()).stdout];
                case 2:
                    error_1 = _a.sent();
                    throw new Error(error_1.stderr);
                case 3: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=os-release-detector.js.map