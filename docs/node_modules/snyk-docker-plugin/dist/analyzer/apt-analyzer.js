"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var docker_1 = require("../docker");
function analyze(targetImage, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var docker, dpkgFile, pkgs, extFile;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    docker = new docker_1.Docker(targetImage, options);
                    return [4 /*yield*/, docker.catSafe('/var/lib/dpkg/status')];
                case 1:
                    dpkgFile = (_a.sent()).stdout;
                    pkgs = parseDpkgFile(dpkgFile);
                    return [4 /*yield*/, docker.catSafe('/var/lib/apt/extended_states')];
                case 2:
                    extFile = (_a.sent()).stdout;
                    if (extFile) {
                        setAutoInstalledPackages(extFile, pkgs);
                    }
                    return [2 /*return*/, {
                            Image: targetImage,
                            AnalyzeType: 'Apt',
                            Analysis: pkgs,
                        }];
            }
        });
    });
}
exports.analyze = analyze;
function parseDpkgFile(text) {
    var pkgs = [];
    var curPkg = null;
    for (var _i = 0, _a = text.split('\n'); _i < _a.length; _i++) {
        var line = _a[_i];
        curPkg = parseDpkgLine(line, curPkg, pkgs);
    }
    return pkgs;
}
function parseDpkgLine(text, curPkg, pkgs) {
    var _a = text.split(': '), key = _a[0], value = _a[1];
    switch (key) {
        case 'Package':
            curPkg = {
                Name: value,
                Version: undefined,
                Source: undefined,
                Provides: [],
                Deps: {},
                AutoInstalled: undefined,
            };
            pkgs.push(curPkg);
            break;
        case 'Version':
            curPkg.Version = value;
            break;
        case 'Source':
            curPkg.Source = value.trim().split(' ')[0];
            break;
        case 'Provides':
            for (var _i = 0, _b = value.split(','); _i < _b.length; _i++) {
                var name = _b[_i];
                name = name.trim().split(' ')[0];
                curPkg.Provides.push(name);
            }
            break;
        case 'Pre-Depends':
        case 'Depends':
            for (var _c = 0, _d = value.split(','); _c < _d.length; _c++) {
                var depElem = _d[_c];
                for (var _e = 0, _f = depElem.split('|'); _e < _f.length; _e++) {
                    var name = _f[_e];
                    name = name.trim().split(' ')[0];
                    curPkg.Deps[name] = true;
                }
            }
            break;
    }
    return curPkg;
}
function setAutoInstalledPackages(text, pkgs) {
    var autoPkgs = parseExtFile(text);
    for (var _i = 0, pkgs_1 = pkgs; _i < pkgs_1.length; _i++) {
        var pkg = pkgs_1[_i];
        if (autoPkgs[pkg.Name]) {
            pkg.AutoInstalled = true;
        }
    }
}
function parseExtFile(text) {
    var pkgMap = {};
    var curPkgName = null;
    for (var _i = 0, _a = text.split('\n'); _i < _a.length; _i++) {
        var line = _a[_i];
        curPkgName = parseExtLine(line, curPkgName, pkgMap);
    }
    return pkgMap;
}
function parseExtLine(text, curPkgName, pkgMap) {
    var _a = text.split(': '), key = _a[0], value = _a[1];
    switch (key) {
        case 'Package':
            curPkgName = value;
            break;
        case 'Auto-Installed':
            if (parseInt(value, 10) === 1) {
                pkgMap[curPkgName] = true;
            }
            break;
    }
    return curPkgName;
}
//# sourceMappingURL=apt-analyzer.js.map