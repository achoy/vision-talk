"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var docker_1 = require("../../docker");
function extract(targetImage, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var output, error_1, stderr;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, new docker_1.Docker(targetImage, options)
                            .run('java', ['-version'])];
                case 1:
                    output = (_a.sent());
                    return [2 /*return*/, parseOpenJDKBinary(output.stdout + output.stderr)];
                case 2:
                    error_1 = _a.sent();
                    stderr = error_1.stderr;
                    if (typeof stderr === 'string' && stderr.indexOf('not found') >= 0) {
                        return [2 /*return*/, null];
                    }
                    throw new Error(stderr);
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.extract = extract;
function parseOpenJDKBinary(fullVersionOutput) {
    /*
    `java -version` output:
    `java version "1.8.0_191"
     Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
     Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)`
    => extracting `1.8.0_191-b12`
    */
    var runtimeEnv = 'Runtime Environment';
    var runtimeLine = fullVersionOutput &&
        fullVersionOutput.trim()
            .split('\n')
            .find(function (line) { return line.includes(runtimeEnv); });
    if (!runtimeLine) {
        return null;
    }
    var bracketsRE = /\(build (.*)\)$/;
    var buildVersion = runtimeLine.match(bracketsRE);
    var version = buildVersion && buildVersion[1];
    if (!version) {
        return null;
    }
    return {
        name: 'openjdk-jre',
        version: version,
    };
}
var javaPkgRegexByPkgManager = {
    apt: [/openjdk-\d*-jre-headless/,
        // openjdk-11-jre-headless
        /gcj-\d*.?\d*-jre-headless/,
        // gcj-4.8-jre-headless
        /gcc-snapshot/],
    apk: [/java-common/,
        /java-gcj-compat/,
        /^openjdk\d+/],
    rpm: [/^java-\d*.?\d*.?\d*-openjdk/,
        // java-11-openjdk-11.0.ea.28-7.el7.x86_64,
        // java-1.8.0-openjdk-1.8.0.181-7.b13.el7.i686
        /^java-\d*.?\d*.?\d*-gcj/],
};
function installedByPackageManager(installedPackages, pkgManager) {
    if (!pkgManager || !javaPkgRegexByPkgManager.hasOwnProperty(pkgManager)) {
        return false;
    }
    var binaryPkgNames = javaPkgRegexByPkgManager[pkgManager];
    for (var _i = 0, installedPackages_1 = installedPackages; _i < installedPackages_1.length; _i++) {
        var pkg = installedPackages_1[_i];
        for (var _a = 0, binaryPkgNames_1 = binaryPkgNames; _a < binaryPkgNames_1.length; _a++) {
            var binaryRegex = binaryPkgNames_1[_a];
            if (pkg.match(binaryRegex)) {
                return true;
            }
        }
    }
    return false;
}
exports.installedByPackageManager = installedByPackageManager;
//# sourceMappingURL=openjdk-jre.js.map