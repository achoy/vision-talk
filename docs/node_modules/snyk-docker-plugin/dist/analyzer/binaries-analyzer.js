"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
function analyze(targetImage, installedPackages, pkgManager, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var binaries;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getBinaries(targetImage, installedPackages, pkgManager, options)];
                case 1:
                    binaries = _a.sent();
                    return [2 /*return*/, {
                            Image: targetImage,
                            AnalyzeType: 'binaries',
                            Analysis: binaries,
                        }];
            }
        });
    });
}
exports.analyze = analyze;
var binaryVersionExtractors = {
    node: require('./binary-version-extractors/node'),
    openjdk: require('./binary-version-extractors/openjdk-jre'),
};
function getBinaries(targetImage, installedPackages, pkgManager, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var binaries, _i, _a, versionExtractor, extractor, binary;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    binaries = [];
                    _i = 0, _a = Object.keys(binaryVersionExtractors);
                    _b.label = 1;
                case 1:
                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                    versionExtractor = _a[_i];
                    extractor = binaryVersionExtractors[versionExtractor];
                    if (extractor.installedByPackageManager(installedPackages, pkgManager, options)) {
                        return [3 /*break*/, 3];
                    }
                    return [4 /*yield*/, extractor.extract(targetImage, options)];
                case 2:
                    binary = _b.sent();
                    if (binary) {
                        binaries.push(binary);
                    }
                    _b.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, binaries];
            }
        });
    });
}
//# sourceMappingURL=binaries-analyzer.js.map