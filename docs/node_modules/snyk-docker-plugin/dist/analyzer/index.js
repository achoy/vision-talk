"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var osReleaseDetector = require("./os-release-detector");
var imageInspector = require("./image-inspector");
var apkAnalyzer = require("./apk-analyzer");
var aptAnalyzer = require("./apt-analyzer");
var rpmAnalyzer = require("./rpm-analyzer");
var binariesAnalyzer = require("./binaries-analyzer");
var debug = require('debug')('snyk');
function analyze(targetImage, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, imageInspection, osRelease, results, _b, installedPackages, pkgManager, binaries, err_1;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        imageInspector.detect(targetImage, options),
                        osReleaseDetector.detect(targetImage, options)
                    ])];
                case 1:
                    _a = _c.sent(), imageInspection = _a[0], osRelease = _a[1];
                    return [4 /*yield*/, Promise.all([
                            apkAnalyzer.analyze(targetImage, options),
                            aptAnalyzer.analyze(targetImage, options),
                            rpmAnalyzer.analyze(targetImage, options),
                        ]).catch(function (err) {
                            debug("Error while running analyzer: '" + err.stderr + "'");
                            throw new Error('Failed to detect installed OS packages');
                        })];
                case 2:
                    results = _c.sent();
                    _b = getInstalledPackages(results), installedPackages = _b.installedPackages, pkgManager = _b.pkgManager;
                    _c.label = 3;
                case 3:
                    _c.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, binariesAnalyzer.analyze(targetImage, installedPackages, pkgManager, options)];
                case 4:
                    binaries = _c.sent();
                    return [3 /*break*/, 6];
                case 5:
                    err_1 = _c.sent();
                    debug("Error while running binaries analyzer: '" + err_1 + "'");
                    throw new Error('Failed to detect binaries versions');
                case 6: return [2 /*return*/, {
                        imageId: imageInspection.Id,
                        osRelease: osRelease,
                        results: results,
                        binaries: binaries,
                        imageLayers: imageInspection.RootFS && imageInspection.RootFS.Layers,
                    }];
            }
        });
    });
}
exports.analyze = analyze;
function getInstalledPackages(results) {
    var dockerAnalysis = results.find(function (res) {
        return res.Analysis && res.Analysis.length > 0;
    });
    if (!dockerAnalysis) {
        return { installedPackages: [] };
    }
    var installedPackages = dockerAnalysis.Analysis.map(function (pkg) { return pkg.Name; });
    var pkgManager = dockerAnalysis.AnalyzeType;
    if (pkgManager) {
        pkgManager = pkgManager.toLowerCase();
    }
    return { installedPackages: installedPackages, pkgManager: pkgManager };
}
//# sourceMappingURL=index.js.map