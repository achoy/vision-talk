"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var subProcess = require("./sub-process");
var Docker = /** @class */ (function () {
    function Docker(targetImage, options) {
        this.targetImage = targetImage;
        this.optionsList = Docker.createOptionsList(options);
    }
    Docker.run = function (args, options) {
        return subProcess.execute('docker', Docker.createOptionsList(options).concat(args));
    };
    Docker.createOptionsList = function (options) {
        var opts = [];
        if (!options) {
            return opts;
        }
        if (options.host) {
            opts.push("--host=" + options.host);
        }
        if (options.tlscert) {
            opts.push("--tlscert=" + options.tlscert);
        }
        if (options.tlscacert) {
            opts.push("--tlscacert=" + options.tlscacert);
        }
        if (options.tlskey) {
            opts.push("--tlskey=" + options.tlskey);
        }
        if (options.tlsverify) {
            opts.push("--tlsverify=" + options.tlsverify);
        }
        return opts;
    };
    Docker.prototype.run = function (cmd, args) {
        if (args === void 0) { args = []; }
        return subProcess.execute('docker', this.optionsList.concat([
            'run', '--rm', '--entrypoint', '""', '--network', 'none',
            this.targetImage, cmd
        ], args));
    };
    Docker.prototype.inspect = function (targetImage) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, subProcess.execute('docker', this.optionsList.concat(['inspect', targetImage]))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Docker.prototype.catSafe = function (filename) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var error_1, stderr;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.run('cat', [filename])];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        stderr = error_1.stderr;
                        if (typeof stderr === 'string' && stderr.indexOf('No such file') >= 0) {
                            return [2 /*return*/, { stdout: '', stderr: '' }];
                        }
                        throw error_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Docker;
}());
exports.Docker = Docker;
//# sourceMappingURL=docker.js.map