"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var os = require("os");
var fs = require("fs");
var path = require("path");
var subProcess = require("./sub-process");
var tmp = require("tmp");
var packageFormatVersion = 'mvn:0.0.1';
function inspect(root, targetFile, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var subProject, pkg;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!options) {
                        options = { dev: false };
                    }
                    subProject = options['gradle-sub-project'];
                    return [4 /*yield*/, getAllDeps(root, targetFile, options, subProject)];
                case 1:
                    pkg = _a.sent();
                    return [2 /*return*/, {
                            plugin: {
                                name: 'bundled:gradle',
                                runtime: 'unknown',
                                targetFile: (path.basename(targetFile) === 'build.gradle.kts') ? targetFile : undefined,
                            },
                            package: pkg,
                        }];
            }
        });
    });
}
exports.inspect = inspect;
function extractJsonFromScriptOutput(stdoutText) {
    var lines = stdoutText.split('\n');
    var jsonLine = null;
    lines.forEach(function (l) {
        if (/^JSONDEPS /.test(l)) {
            if (jsonLine !== null) {
                throw new Error('More than one line with "JSONDEPS " prefix was returned');
            }
            jsonLine = l.substr(9);
        }
    });
    if (jsonLine === null) {
        throw new Error('No line prefixed with "JSONDEPS " was returned');
    }
    return JSON.parse(jsonLine);
}
function getAllDeps(root, targetFile, options, subProject) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var args, tmpInitGradle, initGradlePath, error_1, command, stdoutText, allProjectDeps, packageName, depTree, packageVersion, error_2;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    args = buildArgs(root, targetFile, options.args);
                    tmpInitGradle = null;
                    initGradlePath = null;
                    if (/index.js$/.test(__filename)) {
                        // running from ./dist/lib
                        initGradlePath = path.join(__dirname, '../../lib/init.gradle');
                    }
                    else if (/index.ts$/.test(__filename)) {
                        // running from ./lib
                        initGradlePath = path.join(__dirname, 'init.gradle');
                    }
                    else {
                        throw new Error('Cannot locate Snyk init.gradle script');
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    tmpInitGradle = tmp.fileSync({ postfix: '-init.gradle' });
                    return [4 /*yield*/, fs.createReadStream(initGradlePath).pipe(fs.createWriteStream('', { fd: tmpInitGradle.fd }))];
                case 2:
                    _a.sent();
                    initGradlePath = tmpInitGradle.name;
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    error_1.message = error_1.message + '\n\n' +
                        'Failed to create a temporary file to host Snyk init script for Gradle build analysis.';
                    throw error_1;
                case 4:
                    args.push('-I ' + initGradlePath);
                    // There might be a --configuration option in 'args'.
                    // We need to convert it to a property: https://stackoverflow.com/a/48370451
                    // TODO: (in snyk-cli) move `configuration` to `options`, disallow arbitrary args,
                    // pin down `options` format via Typescript
                    args.forEach(function (a, i) {
                        // Transform --configuration=foo
                        args[i] = a.replace(/^--configuration[= ]/, '-Pconfiguration=');
                        // Transform --configuration foo
                        if (a === '--configuration') {
                            args[i] = '-Pconfiguration=' + args[i + 1];
                            args[i + 1] = '';
                        }
                    });
                    command = getCommand(root, targetFile);
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, subProcess.execute(command, args, { cwd: root })];
                case 6:
                    stdoutText = _a.sent();
                    if (tmpInitGradle !== null) {
                        tmpInitGradle.removeCallback();
                    }
                    allProjectDeps = extractJsonFromScriptOutput(stdoutText);
                    packageName = path.basename(root);
                    depTree = {};
                    if (subProject) {
                        packageName += '/' + subProject;
                        depTree = allProjectDeps.projects[subProject];
                    }
                    else {
                        depTree = allProjectDeps.projects[allProjectDeps.defaultProject];
                    }
                    packageVersion = '0.0.0';
                    return [2 /*return*/, {
                            dependencies: depTree,
                            name: packageName,
                            version: packageVersion,
                            packageFormatVersion: packageFormatVersion,
                        }];
                case 7:
                    error_2 = _a.sent();
                    error_2.message = error_2.message + '\n\n' +
                        'Please make sure that `' + command + ' ' + args.join(' ') +
                        '` executes successfully on this project.\n\n' +
                        'If the problem persists, collect the output of `' +
                        command + ' ' + args.join(' ') + '` and contact support@snyk.io\n';
                    throw error_2;
                case 8: return [2 /*return*/];
            }
        });
    });
}
function getCommand(root, targetFile) {
    var isWin = /^win/.test(os.platform());
    var wrapperScript = isWin ? 'gradlew.bat' : './gradlew';
    // try to find a sibling wrapper script first
    var pathToWrapper = path.resolve(root, path.dirname(targetFile), wrapperScript);
    if (fs.existsSync(pathToWrapper)) {
        return pathToWrapper;
    }
    // now try to find a wrapper in the root
    pathToWrapper = path.resolve(root, wrapperScript);
    if (fs.existsSync(pathToWrapper)) {
        return pathToWrapper;
    }
    return 'gradle';
}
function buildArgs(root, targetFile, gradleArgs) {
    var args = [];
    args.push('snykResolvedDepsJson', '-q');
    if (targetFile) {
        if (!fs.existsSync(path.resolve(root, targetFile))) {
            throw new Error('File not found: "' + targetFile + '"');
        }
        args.push('--build-file');
        var formattedTargetFile = targetFile;
        if (/\s/.test(targetFile)) { // checking for whitespaces
            var isWin = /^win/.test(os.platform());
            var quot = isWin ? '"' : '\'';
            formattedTargetFile = quot + targetFile + quot;
        }
        args.push(formattedTargetFile);
    }
    // For some reason, this is not required for Unix, but on Windows, without this flag, apparently,
    // Gradle process just never exits, from the Node's standpoint.
    args.push('--no-daemon');
    // Parallel builds can cause race conditions and multiple JSONDEPS lines in the output
    // Gradle 4.3.0+ has `--no-parallel` flag, but we want to support older versions.
    args.push('-Dorg.gradle.parallel=false');
    if (gradleArgs) {
        args.push.apply(args, gradleArgs);
    }
    return args;
}
exports.exportsForTests = {
    buildArgs: buildArgs,
    extractJsonFromScriptOutput: extractJsonFromScriptOutput,
};
//# sourceMappingURL=index.js.map